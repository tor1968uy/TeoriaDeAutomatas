##### **Ejercicio 4 - NFA con estados sin transici√≥n**

**Descripci√≥n del problema**

En un NFA (Aut√≥mata Finito No Determinista), un estado puede no tener transiciones para un s√≠mbolo de entrada. En este caso, los caminos que llegan a ese estado "mueren" y no pueden continuar.

Queremos implementar la simulaci√≥n de un NFA en Python, considerando que algunos estados pueden no tener transiciones para ciertos s√≠mbolos.

**Objetivo**
- Implementar un NFA con estados sin transici√≥n.
- Procesar una palabra y determinar si al menos un camino lleva a un estado de aceptaci√≥n.
- Finalizar el procesamiento de un camino cuando no hay transici√≥n disponible.

**Definici√≥n del NFA**
- Estados: $\{q_, q_1, q_2, q_3, q_4\}$
- Alfabeto: $\{a, b\}$
- Estado inicial: $q_0$
- Estados de aceptaci√≥n: $\{q_3\}$
- Transiciones:

| Estado  | Entrada $a$ | Entrada $b$ |
| :-----: | :---------: | :---------: |
| $q_0$   | $q_1, q_2$  |   -    |
| $q_1$   |   -         | $q_3$  |
| $q_2$   | $q_4$       |   -    |
| $q_3$   | $q_3$       |   -    |
| $q_4$   |   -         |   -    |

**üìå Nota:**
- $q_4$ no tiene transiciones, lo que significa que cualquier camino que llegue a q4 se considera muerto.
- Un camino es v√°lido solo si al final de la palabra al menos un estado activo pertenece a $F$.

**Entradas**
- Una palabra formada por los s√≠mbolos $\{a, b\}$.

**Salidas**
- "Aceptada" si al menos un camino lleva a un estado de aceptaci√≥n.
- "Rechazada" si todos los caminos mueren antes de llegar a un estado final.

**Dica para implementar en Python**

En la simulaci√≥n, mantenemos una lista de estados activos.
1. Si un estado no tiene transiciones para un s√≠mbolo, lo eliminamos de la lista.
2. Si la lista de estados activos se vac√≠a antes de terminar la palabra, la palabra se rechaza inmediatamente.
"""

def simular_nfa(estado_inicial, estados_aceptacion, transiciones, palabra):
    # Simula el procesamiento de una palabra en un NFA.
    # Args:
    #    estado_inicial (str): Estado inicial del NFA.
    #    estados_aceptacion (set): Conjunto de estados de aceptaci√≥n.
    #    transiciones (dict): Funci√≥n de transici√≥n (puede ser no determinista).
    #    palabra (str): Palabra a procesar.
    # Returns:
    #    str: "Aceptada" si al menos un camino lleva a aceptaci√≥n, "Rechazada" en caso contrario.

    estados_actuales = {estado_inicial}  # Conjunto de estados actuales (puede haber varios)

    for simbolo in palabra:
        nuevos_estados = set()
        for estado in estados_actuales:
            if (estado, simbolo) in transiciones:
                nuevos_estados.update(transiciones[(estado, simbolo)])
        estados_actuales = nuevos_estados
        if not estados_actuales:  # Si no hay transiciones posibles
            return "Rechazada"

    # Verificar si al menos un estado actual es de aceptaci√≥n
    return "Aceptada" if estados_actuales & estados_aceptacion else "Rechazada"

def validar_palabra(palabra, alfabeto):
    return all(simbolo in alfabeto for simbolo in palabra)

# Definici√≥n del NFA
estados = {"q0", "q1", "q2", "q3", "q4"}  # Estados posibles
alfabeto = {"a", "b"}          # Alfabeto permitido
estado_inicial = "q0"          # Estado inicial
estados_aceptacion = {"q3"}    # Estados de aceptaci√≥n

# Funci√≥n de transici√≥n no determinista (Œ¥)
transiciones = {
    ("q0", "a"): {"q1", "q2"},  # Desde q0, con 'a' puede ir a q1 o q2
    ("q1", "b"): {"q3"},        # Desde q1, con 'b' va a q3
    ("q2", "a"): {"q4"},        # Desde q2, con 'a' sigue en q4
    ("q3", "a"): {"q3"}        # Desde q3, con 'a' sigue en q3
}

# Ejemplos predefinidos
ejemplos = ["ab", "aab", "bbab", "baab", "aaaaaab"]
print("\n=== Pruebas Autom√°ticas ===")
for ejemplo in ejemplos:
    if validar_palabra(ejemplo, alfabeto):
        resultado = simular_nfa(estado_inicial, estados_aceptacion, transiciones, ejemplo)
        print(f"'{ejemplo}' ‚Üí {resultado}")
    else:
        print(f"'{ejemplo}' ‚Üí Error: Contiene s√≠mbolos no v√°lidos")

palabra = ' '
print("\n=== Modo Interactivo ===")
print("Ingrese palabras una por una. Presione Enter sin escribir para terminar.")
lista_palabras = []
while palabra != '':
   palabra = input("Ingrese una palabra: ")
   if palabra != '' :
      lista_palabras.append(palabra)

print("\n=== Resultados ===")
for i, palabra in enumerate(lista_palabras, 1):
    if validar_palabra(palabra, alfabeto):
        resultado = simular_nfa(estado_inicial, estados_aceptacion, transiciones, palabra)
        print(f"Palabra {i}: '{palabra}' ‚Üí {resultado}")
    else:
        print(f"Palabra {i}: '{palabra}' ‚Üí Error: Contiene s√≠mbolos no v√°lidos")
