##### **Ejemplo 1: Construcción de un DFA que acepte palabras que terminen en "01"**

**Definición del DFA**
- Estados: $\{q_0, q_1, q_2\}$
- Alfabeto de entrada: $\{0,1\}$
- Estado inicial: $q_0$
- Estado de aceptación: $\{q_2\}$
- Función de transición $\delta$:

| Estado  | Entrada $0$ | Entrada $1$ |
| :-----: | :---------: | :---------: |
| $q_0$   |   $q_1$   | $q_0$ |
| $q_1$   |   $q_1$  | $q_2$ |
| $q_2$   |  $q_1$   | $q_0$ |
"""

class DFA:
    def __init__(self, estados, alfabeto, transiciones, estado_inicial, estados_aceptacion):
        self.estados = estados
        self.alfabeto = alfabeto
        self.transiciones = transiciones
        self.estado_inicial = estado_inicial
        self.estados_aceptacion = estados_aceptacion

    def procesar_palabra(self, palabra):
        estado_actual = self.estado_inicial
        for simbolo in palabra:
            estado_actual = self.transiciones.get((estado_actual, simbolo), None)
            if estado_actual is None:
                return "Rechazada"
        return "Aceptada" if estado_actual in self.estados_aceptacion else "Rechazada"

# Definir el DFA
estados = {"q0", "q1", "q2"}
alfabeto = {"0", "1"}
estado_inicial = "q0"
estados_aceptacion = {"q2"}
transiciones = {
    ("q0", "0"): "q1", ("q0", "1"): "q0",
    ("q1", "0"): "q1", ("q1", "1"): "q2",
    ("q2", "0"): "q1", ("q2", "1"): "q0"
}

dfa = DFA(estados, alfabeto, transiciones, estado_inicial, estados_aceptacion)

# Probar palabras
palabras = ["01", "1001", "110", "0001"]
for palabra in palabras:
    print(f'Palabra: "{palabra}" -> {dfa.procesar_palabra(palabra)}')
